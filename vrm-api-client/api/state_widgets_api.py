# coding: utf-8

"""
    VRM API

    ## Introduction This document provides a brief overview of some of the available endpoints and their parameters. The API is a REST API, accepting JSON as request body. You can use the try-it tool to play around with it, or use software like Postman.  ## Authentication Most endpoints require authentication, using a JWT token. This token should be placed in the `x-authorization` field in the HTTP header. There are two types of tokens. - Bearer token. Uses the `Bearer <token_value>` format. This is used when logging in to VRM, for example. Can be retrieved from [/auth/login](/operations/auth/login) or [/auth/loginAsDemo](/operations/auth/loginAsDemo). - Access token. Uses the `Token <token_value>` format. This is commonly used for third party applications using the VRM API. Can be created using [/users/{idUser}/accesstokens/create](/operations/users/idUser/accesstokens/create).  ## Rate limiting Most endpoints are by default rate limited with a rolling window of max 200 requests, where every 0.33 seconds a request gets removed from the rolling window. (so on average maximum of 3 requests per second won't get rate limited). There are different types of ratelimiting in VRM. If you receive a 429 with a JSON response, you can check the Retry-After response header to check the amount of seconds you have to wait until retrying.  ## WARNING & DISCLAIMER Whilst publicly available, Victron Energy does not offer support to professional customers or end-users that implement features using the here documented functionality, except in really specific situations (i.e such as a special arrangement with a large OEM customer).  The recommended method for support on the VRM API is to use the Modifications section on Victron Community. This space is frequently visited by many people using the API, and other methods of integrating with Victron products. Direct company support is only offered on a limited basis via your Victron representative.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from vrm-api-client.api_client import ApiClient


class StateWidgetsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def installationsid_sitewidgets_battery_external_relay_state_command(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """Battery external relay state graph data  # noqa: E501

        Retrieves battery external relay state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitewidgets_battery_external_relay_state_command(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :param object instance: Instance for which to retrieve data, defaults to 0.
        :param object start: Timestamp from which to fetch data, defaults to one day ago.
        :param object end: Timestamp to which to fetch data, defaults to now.
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.installationsid_sitewidgets_battery_external_relay_state_command_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
        else:
            (data) = self.installationsid_sitewidgets_battery_external_relay_state_command_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
            return data

    def installationsid_sitewidgets_battery_external_relay_state_command_with_http_info(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """Battery external relay state graph data  # noqa: E501

        Retrieves battery external relay state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitewidgets_battery_external_relay_state_command_with_http_info(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :param object instance: Instance for which to retrieve data, defaults to 0.
        :param object start: Timestamp from which to fetch data, defaults to one day ago.
        :param object end: Timestamp to which to fetch data, defaults to now.
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_authorization', 'id_site', 'instance', 'start', 'end']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method installationsid_sitewidgets_battery_external_relay_state_command" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_authorization' is set
        if ('x_authorization' not in params or
                params['x_authorization'] is None):
            raise ValueError("Missing the required parameter `x_authorization` when calling `installationsid_sitewidgets_battery_external_relay_state_command`")  # noqa: E501
        # verify the required parameter 'id_site' is set
        if ('id_site' not in params or
                params['id_site'] is None):
            raise ValueError("Missing the required parameter `id_site` when calling `installationsid_sitewidgets_battery_external_relay_state_command`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_site' in params:
            path_params['idSite'] = params['id_site']  # noqa: E501

        query_params = []
        if 'instance' in params:
            query_params.append(('instance', params['instance']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501

        header_params = {}
        if 'x_authorization' in params:
            header_params['x-authorization'] = params['x_authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/installations/{idSite}/widgets/BatteryExternalRelayState', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20027',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def installationsid_sitewidgets_battery_monitor_warnings_and_alarms(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """Battery monitor warnings and alarms graph data  # noqa: E501

        Retrieves battery monitor warnings and alarms data for a state graph. If not given a timeframe, data for the last day will be retrieved.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitewidgets_battery_monitor_warnings_and_alarms(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :param object instance: Instance for which to retrieve data, defaults to 0.
        :param object start: Timestamp from which to fetch data, defaults to one day ago.
        :param object end: Timestamp to which to fetch data, defaults to now.
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.installationsid_sitewidgets_battery_monitor_warnings_and_alarms_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
        else:
            (data) = self.installationsid_sitewidgets_battery_monitor_warnings_and_alarms_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
            return data

    def installationsid_sitewidgets_battery_monitor_warnings_and_alarms_with_http_info(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """Battery monitor warnings and alarms graph data  # noqa: E501

        Retrieves battery monitor warnings and alarms data for a state graph. If not given a timeframe, data for the last day will be retrieved.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitewidgets_battery_monitor_warnings_and_alarms_with_http_info(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :param object instance: Instance for which to retrieve data, defaults to 0.
        :param object start: Timestamp from which to fetch data, defaults to one day ago.
        :param object end: Timestamp to which to fetch data, defaults to now.
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_authorization', 'id_site', 'instance', 'start', 'end']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method installationsid_sitewidgets_battery_monitor_warnings_and_alarms" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_authorization' is set
        if ('x_authorization' not in params or
                params['x_authorization'] is None):
            raise ValueError("Missing the required parameter `x_authorization` when calling `installationsid_sitewidgets_battery_monitor_warnings_and_alarms`")  # noqa: E501
        # verify the required parameter 'id_site' is set
        if ('id_site' not in params or
                params['id_site'] is None):
            raise ValueError("Missing the required parameter `id_site` when calling `installationsid_sitewidgets_battery_monitor_warnings_and_alarms`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_site' in params:
            path_params['idSite'] = params['id_site']  # noqa: E501

        query_params = []
        if 'instance' in params:
            query_params.append(('instance', params['instance']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501

        header_params = {}
        if 'x_authorization' in params:
            header_params['x-authorization'] = params['x_authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/installations/{idSite}/widgets/BatteryMonitorWarningsAndAlarms', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20027',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def installationsid_sitewidgets_battery_relay_state(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """Battery relay state graph data  # noqa: E501

        Retrieves battery relay state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitewidgets_battery_relay_state(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :param object instance: Instance for which to retrieve data, defaults to 0.
        :param object start: Timestamp from which to fetch data, defaults to one day ago.
        :param object end: Timestamp to which to fetch data, defaults to now.
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.installationsid_sitewidgets_battery_relay_state_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
        else:
            (data) = self.installationsid_sitewidgets_battery_relay_state_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
            return data

    def installationsid_sitewidgets_battery_relay_state_with_http_info(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """Battery relay state graph data  # noqa: E501

        Retrieves battery relay state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitewidgets_battery_relay_state_with_http_info(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :param object instance: Instance for which to retrieve data, defaults to 0.
        :param object start: Timestamp from which to fetch data, defaults to one day ago.
        :param object end: Timestamp to which to fetch data, defaults to now.
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_authorization', 'id_site', 'instance', 'start', 'end']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method installationsid_sitewidgets_battery_relay_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_authorization' is set
        if ('x_authorization' not in params or
                params['x_authorization'] is None):
            raise ValueError("Missing the required parameter `x_authorization` when calling `installationsid_sitewidgets_battery_relay_state`")  # noqa: E501
        # verify the required parameter 'id_site' is set
        if ('id_site' not in params or
                params['id_site'] is None):
            raise ValueError("Missing the required parameter `id_site` when calling `installationsid_sitewidgets_battery_relay_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_site' in params:
            path_params['idSite'] = params['id_site']  # noqa: E501

        query_params = []
        if 'instance' in params:
            query_params.append(('instance', params['instance']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501

        header_params = {}
        if 'x_authorization' in params:
            header_params['x-authorization'] = params['x_authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/installations/{idSite}/widgets/BatteryRelayState', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20027',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def installationsid_sitewidgets_charger_relay_state(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """Charger relay state graph data  # noqa: E501

        Retrieves charger relay state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitewidgets_charger_relay_state(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :param object instance: Instance for which to retrieve data, defaults to 0.
        :param object start: Timestamp from which to fetch data, defaults to one day ago.
        :param object end: Timestamp to which to fetch data, defaults to now.
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.installationsid_sitewidgets_charger_relay_state_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
        else:
            (data) = self.installationsid_sitewidgets_charger_relay_state_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
            return data

    def installationsid_sitewidgets_charger_relay_state_with_http_info(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """Charger relay state graph data  # noqa: E501

        Retrieves charger relay state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitewidgets_charger_relay_state_with_http_info(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :param object instance: Instance for which to retrieve data, defaults to 0.
        :param object start: Timestamp from which to fetch data, defaults to one day ago.
        :param object end: Timestamp to which to fetch data, defaults to now.
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_authorization', 'id_site', 'instance', 'start', 'end']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method installationsid_sitewidgets_charger_relay_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_authorization' is set
        if ('x_authorization' not in params or
                params['x_authorization'] is None):
            raise ValueError("Missing the required parameter `x_authorization` when calling `installationsid_sitewidgets_charger_relay_state`")  # noqa: E501
        # verify the required parameter 'id_site' is set
        if ('id_site' not in params or
                params['id_site'] is None):
            raise ValueError("Missing the required parameter `id_site` when calling `installationsid_sitewidgets_charger_relay_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_site' in params:
            path_params['idSite'] = params['id_site']  # noqa: E501

        query_params = []
        if 'instance' in params:
            query_params.append(('instance', params['instance']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501

        header_params = {}
        if 'x_authorization' in params:
            header_params['x-authorization'] = params['x_authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/installations/{idSite}/widgets/ChargerRelayState', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20027',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def installationsid_sitewidgets_charger_state(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """Charger state graph data  # noqa: E501

        Retrieves charger state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitewidgets_charger_state(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :param object instance: Instance for which to retrieve data, defaults to 0.
        :param object start: Timestamp from which to fetch data, defaults to one day ago.
        :param object end: Timestamp to which to fetch data, defaults to now.
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.installationsid_sitewidgets_charger_state_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
        else:
            (data) = self.installationsid_sitewidgets_charger_state_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
            return data

    def installationsid_sitewidgets_charger_state_with_http_info(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """Charger state graph data  # noqa: E501

        Retrieves charger state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitewidgets_charger_state_with_http_info(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :param object instance: Instance for which to retrieve data, defaults to 0.
        :param object start: Timestamp from which to fetch data, defaults to one day ago.
        :param object end: Timestamp to which to fetch data, defaults to now.
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_authorization', 'id_site', 'instance', 'start', 'end']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method installationsid_sitewidgets_charger_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_authorization' is set
        if ('x_authorization' not in params or
                params['x_authorization'] is None):
            raise ValueError("Missing the required parameter `x_authorization` when calling `installationsid_sitewidgets_charger_state`")  # noqa: E501
        # verify the required parameter 'id_site' is set
        if ('id_site' not in params or
                params['id_site'] is None):
            raise ValueError("Missing the required parameter `id_site` when calling `installationsid_sitewidgets_charger_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_site' in params:
            path_params['idSite'] = params['id_site']  # noqa: E501

        query_params = []
        if 'instance' in params:
            query_params.append(('instance', params['instance']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501

        header_params = {}
        if 'x_authorization' in params:
            header_params['x-authorization'] = params['x_authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/installations/{idSite}/widgets/ChargerState', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20027',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def installationsid_sitewidgets_ess_battery_life_state(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """ESS battery life state graph data  # noqa: E501

        Retrieves ESS battery life state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitewidgets_ess_battery_life_state(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :param object instance: Instance for which to retrieve data, defaults to 0.
        :param object start: Timestamp from which to fetch data, defaults to one day ago.
        :param object end: Timestamp to which to fetch data, defaults to now.
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.installationsid_sitewidgets_ess_battery_life_state_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
        else:
            (data) = self.installationsid_sitewidgets_ess_battery_life_state_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
            return data

    def installationsid_sitewidgets_ess_battery_life_state_with_http_info(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """ESS battery life state graph data  # noqa: E501

        Retrieves ESS battery life state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitewidgets_ess_battery_life_state_with_http_info(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :param object instance: Instance for which to retrieve data, defaults to 0.
        :param object start: Timestamp from which to fetch data, defaults to one day ago.
        :param object end: Timestamp to which to fetch data, defaults to now.
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_authorization', 'id_site', 'instance', 'start', 'end']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method installationsid_sitewidgets_ess_battery_life_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_authorization' is set
        if ('x_authorization' not in params or
                params['x_authorization'] is None):
            raise ValueError("Missing the required parameter `x_authorization` when calling `installationsid_sitewidgets_ess_battery_life_state`")  # noqa: E501
        # verify the required parameter 'id_site' is set
        if ('id_site' not in params or
                params['id_site'] is None):
            raise ValueError("Missing the required parameter `id_site` when calling `installationsid_sitewidgets_ess_battery_life_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_site' in params:
            path_params['idSite'] = params['id_site']  # noqa: E501

        query_params = []
        if 'instance' in params:
            query_params.append(('instance', params['instance']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501

        header_params = {}
        if 'x_authorization' in params:
            header_params['x-authorization'] = params['x_authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/installations/{idSite}/widgets/EssBatteryLifeState', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20027',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def installationsid_sitewidgets_fuel_cell_state(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """Fuel cell state graph data  # noqa: E501

        Retrieves fuel cell state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitewidgets_fuel_cell_state(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :param object instance: Instance for which to retrieve data, defaults to 0.
        :param object start: Timestamp from which to fetch data, defaults to one day ago.
        :param object end: Timestamp to which to fetch data, defaults to now.
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.installationsid_sitewidgets_fuel_cell_state_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
        else:
            (data) = self.installationsid_sitewidgets_fuel_cell_state_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
            return data

    def installationsid_sitewidgets_fuel_cell_state_with_http_info(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """Fuel cell state graph data  # noqa: E501

        Retrieves fuel cell state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitewidgets_fuel_cell_state_with_http_info(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :param object instance: Instance for which to retrieve data, defaults to 0.
        :param object start: Timestamp from which to fetch data, defaults to one day ago.
        :param object end: Timestamp to which to fetch data, defaults to now.
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_authorization', 'id_site', 'instance', 'start', 'end']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method installationsid_sitewidgets_fuel_cell_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_authorization' is set
        if ('x_authorization' not in params or
                params['x_authorization'] is None):
            raise ValueError("Missing the required parameter `x_authorization` when calling `installationsid_sitewidgets_fuel_cell_state`")  # noqa: E501
        # verify the required parameter 'id_site' is set
        if ('id_site' not in params or
                params['id_site'] is None):
            raise ValueError("Missing the required parameter `id_site` when calling `installationsid_sitewidgets_fuel_cell_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_site' in params:
            path_params['idSite'] = params['id_site']  # noqa: E501

        query_params = []
        if 'instance' in params:
            query_params.append(('instance', params['instance']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501

        header_params = {}
        if 'x_authorization' in params:
            header_params['x-authorization'] = params['x_authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/installations/{idSite}/widgets/FuelCellState', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20027',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def installationsid_sitewidgets_gateway_relay_state(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """Gateway relay state graph data  # noqa: E501

        Retrieves gateway relay state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitewidgets_gateway_relay_state(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :param object instance: Instance for which to retrieve data, defaults to 0.
        :param object start: Timestamp from which to fetch data, defaults to one day ago.
        :param object end: Timestamp to which to fetch data, defaults to now.
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.installationsid_sitewidgets_gateway_relay_state_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
        else:
            (data) = self.installationsid_sitewidgets_gateway_relay_state_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
            return data

    def installationsid_sitewidgets_gateway_relay_state_with_http_info(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """Gateway relay state graph data  # noqa: E501

        Retrieves gateway relay state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitewidgets_gateway_relay_state_with_http_info(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :param object instance: Instance for which to retrieve data, defaults to 0.
        :param object start: Timestamp from which to fetch data, defaults to one day ago.
        :param object end: Timestamp to which to fetch data, defaults to now.
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_authorization', 'id_site', 'instance', 'start', 'end']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method installationsid_sitewidgets_gateway_relay_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_authorization' is set
        if ('x_authorization' not in params or
                params['x_authorization'] is None):
            raise ValueError("Missing the required parameter `x_authorization` when calling `installationsid_sitewidgets_gateway_relay_state`")  # noqa: E501
        # verify the required parameter 'id_site' is set
        if ('id_site' not in params or
                params['id_site'] is None):
            raise ValueError("Missing the required parameter `id_site` when calling `installationsid_sitewidgets_gateway_relay_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_site' in params:
            path_params['idSite'] = params['id_site']  # noqa: E501

        query_params = []
        if 'instance' in params:
            query_params.append(('instance', params['instance']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501

        header_params = {}
        if 'x_authorization' in params:
            header_params['x-authorization'] = params['x_authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/installations/{idSite}/widgets/GatewayRelayState', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20027',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def installationsid_sitewidgets_gateway_relay_two_state(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """Gateway relay two state graph data  # noqa: E501

        Retrieves gateway relay two state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitewidgets_gateway_relay_two_state(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :param object instance: Instance for which to retrieve data, defaults to 0.
        :param object start: Timestamp from which to fetch data, defaults to one day ago.
        :param object end: Timestamp to which to fetch data, defaults to now.
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.installationsid_sitewidgets_gateway_relay_two_state_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
        else:
            (data) = self.installationsid_sitewidgets_gateway_relay_two_state_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
            return data

    def installationsid_sitewidgets_gateway_relay_two_state_with_http_info(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """Gateway relay two state graph data  # noqa: E501

        Retrieves gateway relay two state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitewidgets_gateway_relay_two_state_with_http_info(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :param object instance: Instance for which to retrieve data, defaults to 0.
        :param object start: Timestamp from which to fetch data, defaults to one day ago.
        :param object end: Timestamp to which to fetch data, defaults to now.
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_authorization', 'id_site', 'instance', 'start', 'end']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method installationsid_sitewidgets_gateway_relay_two_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_authorization' is set
        if ('x_authorization' not in params or
                params['x_authorization'] is None):
            raise ValueError("Missing the required parameter `x_authorization` when calling `installationsid_sitewidgets_gateway_relay_two_state`")  # noqa: E501
        # verify the required parameter 'id_site' is set
        if ('id_site' not in params or
                params['id_site'] is None):
            raise ValueError("Missing the required parameter `id_site` when calling `installationsid_sitewidgets_gateway_relay_two_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_site' in params:
            path_params['idSite'] = params['id_site']  # noqa: E501

        query_params = []
        if 'instance' in params:
            query_params.append(('instance', params['instance']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501

        header_params = {}
        if 'x_authorization' in params:
            header_params['x-authorization'] = params['x_authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/installations/{idSite}/widgets/GatewayRelayTwoState', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20027',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def installationsid_sitewidgets_generator_state(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """Generator state graph data  # noqa: E501

        Retrieves generator state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitewidgets_generator_state(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :param object instance: Instance for which to retrieve data, defaults to 0.
        :param object start: Timestamp from which to fetch data, defaults to one day ago.
        :param object end: Timestamp to which to fetch data, defaults to now.
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.installationsid_sitewidgets_generator_state_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
        else:
            (data) = self.installationsid_sitewidgets_generator_state_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
            return data

    def installationsid_sitewidgets_generator_state_with_http_info(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """Generator state graph data  # noqa: E501

        Retrieves generator state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitewidgets_generator_state_with_http_info(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :param object instance: Instance for which to retrieve data, defaults to 0.
        :param object start: Timestamp from which to fetch data, defaults to one day ago.
        :param object end: Timestamp to which to fetch data, defaults to now.
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_authorization', 'id_site', 'instance', 'start', 'end']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method installationsid_sitewidgets_generator_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_authorization' is set
        if ('x_authorization' not in params or
                params['x_authorization'] is None):
            raise ValueError("Missing the required parameter `x_authorization` when calling `installationsid_sitewidgets_generator_state`")  # noqa: E501
        # verify the required parameter 'id_site' is set
        if ('id_site' not in params or
                params['id_site'] is None):
            raise ValueError("Missing the required parameter `id_site` when calling `installationsid_sitewidgets_generator_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_site' in params:
            path_params['idSite'] = params['id_site']  # noqa: E501

        query_params = []
        if 'instance' in params:
            query_params.append(('instance', params['instance']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501

        header_params = {}
        if 'x_authorization' in params:
            header_params['x-authorization'] = params['x_authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/installations/{idSite}/widgets/GeneratorState', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20027',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def installationsid_sitewidgets_input_state(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """Input state graph data  # noqa: E501

        Retrieves input state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitewidgets_input_state(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :param object instance: Instance for which to retrieve data, defaults to 0.
        :param object start: Timestamp from which to fetch data, defaults to one day ago.
        :param object end: Timestamp to which to fetch data, defaults to now.
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.installationsid_sitewidgets_input_state_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
        else:
            (data) = self.installationsid_sitewidgets_input_state_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
            return data

    def installationsid_sitewidgets_input_state_with_http_info(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """Input state graph data  # noqa: E501

        Retrieves input state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitewidgets_input_state_with_http_info(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :param object instance: Instance for which to retrieve data, defaults to 0.
        :param object start: Timestamp from which to fetch data, defaults to one day ago.
        :param object end: Timestamp to which to fetch data, defaults to now.
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_authorization', 'id_site', 'instance', 'start', 'end']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method installationsid_sitewidgets_input_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_authorization' is set
        if ('x_authorization' not in params or
                params['x_authorization'] is None):
            raise ValueError("Missing the required parameter `x_authorization` when calling `installationsid_sitewidgets_input_state`")  # noqa: E501
        # verify the required parameter 'id_site' is set
        if ('id_site' not in params or
                params['id_site'] is None):
            raise ValueError("Missing the required parameter `id_site` when calling `installationsid_sitewidgets_input_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_site' in params:
            path_params['idSite'] = params['id_site']  # noqa: E501

        query_params = []
        if 'instance' in params:
            query_params.append(('instance', params['instance']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501

        header_params = {}
        if 'x_authorization' in params:
            header_params['x-authorization'] = params['x_authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/installations/{idSite}/widgets/InputState', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20027',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def installationsid_sitewidgets_inverter_charger_state(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """Inverter charger state graph data  # noqa: E501

        Retrieves inverter charger state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitewidgets_inverter_charger_state(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :param object instance: Instance for which to retrieve data, defaults to 0.
        :param object start: Timestamp from which to fetch data, defaults to one day ago.
        :param object end: Timestamp to which to fetch data, defaults to now.
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.installationsid_sitewidgets_inverter_charger_state_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
        else:
            (data) = self.installationsid_sitewidgets_inverter_charger_state_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
            return data

    def installationsid_sitewidgets_inverter_charger_state_with_http_info(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """Inverter charger state graph data  # noqa: E501

        Retrieves inverter charger state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitewidgets_inverter_charger_state_with_http_info(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :param object instance: Instance for which to retrieve data, defaults to 0.
        :param object start: Timestamp from which to fetch data, defaults to one day ago.
        :param object end: Timestamp to which to fetch data, defaults to now.
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_authorization', 'id_site', 'instance', 'start', 'end']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method installationsid_sitewidgets_inverter_charger_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_authorization' is set
        if ('x_authorization' not in params or
                params['x_authorization'] is None):
            raise ValueError("Missing the required parameter `x_authorization` when calling `installationsid_sitewidgets_inverter_charger_state`")  # noqa: E501
        # verify the required parameter 'id_site' is set
        if ('id_site' not in params or
                params['id_site'] is None):
            raise ValueError("Missing the required parameter `id_site` when calling `installationsid_sitewidgets_inverter_charger_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_site' in params:
            path_params['idSite'] = params['id_site']  # noqa: E501

        query_params = []
        if 'instance' in params:
            query_params.append(('instance', params['instance']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501

        header_params = {}
        if 'x_authorization' in params:
            header_params['x-authorization'] = params['x_authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/installations/{idSite}/widgets/InverterChargerState', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20027',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def installationsid_sitewidgets_inverter_charger_warnings_and_alarms(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """Inverter charger warnings and alarms graph data  # noqa: E501

        Retrieves inverter warning and alarm state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitewidgets_inverter_charger_warnings_and_alarms(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :param object instance: Instance for which to retrieve data, defaults to 0.
        :param object start: Timestamp from which to fetch data, defaults to one day ago.
        :param object end: Timestamp to which to fetch data, defaults to now.
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.installationsid_sitewidgets_inverter_charger_warnings_and_alarms_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
        else:
            (data) = self.installationsid_sitewidgets_inverter_charger_warnings_and_alarms_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
            return data

    def installationsid_sitewidgets_inverter_charger_warnings_and_alarms_with_http_info(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """Inverter charger warnings and alarms graph data  # noqa: E501

        Retrieves inverter warning and alarm state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitewidgets_inverter_charger_warnings_and_alarms_with_http_info(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :param object instance: Instance for which to retrieve data, defaults to 0.
        :param object start: Timestamp from which to fetch data, defaults to one day ago.
        :param object end: Timestamp to which to fetch data, defaults to now.
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_authorization', 'id_site', 'instance', 'start', 'end']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method installationsid_sitewidgets_inverter_charger_warnings_and_alarms" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_authorization' is set
        if ('x_authorization' not in params or
                params['x_authorization'] is None):
            raise ValueError("Missing the required parameter `x_authorization` when calling `installationsid_sitewidgets_inverter_charger_warnings_and_alarms`")  # noqa: E501
        # verify the required parameter 'id_site' is set
        if ('id_site' not in params or
                params['id_site'] is None):
            raise ValueError("Missing the required parameter `id_site` when calling `installationsid_sitewidgets_inverter_charger_warnings_and_alarms`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_site' in params:
            path_params['idSite'] = params['id_site']  # noqa: E501

        query_params = []
        if 'instance' in params:
            query_params.append(('instance', params['instance']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501

        header_params = {}
        if 'x_authorization' in params:
            header_params['x-authorization'] = params['x_authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/installations/{idSite}/widgets/InverterChargerWarningsAndAlarms', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20027',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def installationsid_sitewidgets_inverter_state(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """Inverter state graph data  # noqa: E501

        Retrieves inverter state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitewidgets_inverter_state(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :param object instance: Instance for which to retrieve data, defaults to 0.
        :param object start: Timestamp from which to fetch data, defaults to one day ago.
        :param object end: Timestamp to which to fetch data, defaults to now.
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.installationsid_sitewidgets_inverter_state_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
        else:
            (data) = self.installationsid_sitewidgets_inverter_state_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
            return data

    def installationsid_sitewidgets_inverter_state_with_http_info(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """Inverter state graph data  # noqa: E501

        Retrieves inverter state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitewidgets_inverter_state_with_http_info(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :param object instance: Instance for which to retrieve data, defaults to 0.
        :param object start: Timestamp from which to fetch data, defaults to one day ago.
        :param object end: Timestamp to which to fetch data, defaults to now.
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_authorization', 'id_site', 'instance', 'start', 'end']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method installationsid_sitewidgets_inverter_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_authorization' is set
        if ('x_authorization' not in params or
                params['x_authorization'] is None):
            raise ValueError("Missing the required parameter `x_authorization` when calling `installationsid_sitewidgets_inverter_state`")  # noqa: E501
        # verify the required parameter 'id_site' is set
        if ('id_site' not in params or
                params['id_site'] is None):
            raise ValueError("Missing the required parameter `id_site` when calling `installationsid_sitewidgets_inverter_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_site' in params:
            path_params['idSite'] = params['id_site']  # noqa: E501

        query_params = []
        if 'instance' in params:
            query_params.append(('instance', params['instance']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501

        header_params = {}
        if 'x_authorization' in params:
            header_params['x-authorization'] = params['x_authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/installations/{idSite}/widgets/InverterState', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20027',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def installationsid_sitewidgets_mppt_state(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """MPPT state graph data  # noqa: E501

        Retrieves MPPT state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitewidgets_mppt_state(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :param object instance: Instance for which to retrieve data, defaults to 0.
        :param object start: Timestamp from which to fetch data, defaults to one day ago.
        :param object end: Timestamp to which to fetch data, defaults to now.
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.installationsid_sitewidgets_mppt_state_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
        else:
            (data) = self.installationsid_sitewidgets_mppt_state_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
            return data

    def installationsid_sitewidgets_mppt_state_with_http_info(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """MPPT state graph data  # noqa: E501

        Retrieves MPPT state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitewidgets_mppt_state_with_http_info(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :param object instance: Instance for which to retrieve data, defaults to 0.
        :param object start: Timestamp from which to fetch data, defaults to one day ago.
        :param object end: Timestamp to which to fetch data, defaults to now.
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_authorization', 'id_site', 'instance', 'start', 'end']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method installationsid_sitewidgets_mppt_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_authorization' is set
        if ('x_authorization' not in params or
                params['x_authorization'] is None):
            raise ValueError("Missing the required parameter `x_authorization` when calling `installationsid_sitewidgets_mppt_state`")  # noqa: E501
        # verify the required parameter 'id_site' is set
        if ('id_site' not in params or
                params['id_site'] is None):
            raise ValueError("Missing the required parameter `id_site` when calling `installationsid_sitewidgets_mppt_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_site' in params:
            path_params['idSite'] = params['id_site']  # noqa: E501

        query_params = []
        if 'instance' in params:
            query_params.append(('instance', params['instance']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501

        header_params = {}
        if 'x_authorization' in params:
            header_params['x-authorization'] = params['x_authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/installations/{idSite}/widgets/MPPTState', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20027',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def installationsid_sitewidgets_solar_charger_relay_state(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """Solar charger relay state graph data  # noqa: E501

        Retrieves solar charger relay state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitewidgets_solar_charger_relay_state(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :param object instance: Instance for which to retrieve data, defaults to 0.
        :param object start: Timestamp from which to fetch data, defaults to one day ago.
        :param object end: Timestamp to which to fetch data, defaults to now.
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.installationsid_sitewidgets_solar_charger_relay_state_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
        else:
            (data) = self.installationsid_sitewidgets_solar_charger_relay_state_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
            return data

    def installationsid_sitewidgets_solar_charger_relay_state_with_http_info(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """Solar charger relay state graph data  # noqa: E501

        Retrieves solar charger relay state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitewidgets_solar_charger_relay_state_with_http_info(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :param object instance: Instance for which to retrieve data, defaults to 0.
        :param object start: Timestamp from which to fetch data, defaults to one day ago.
        :param object end: Timestamp to which to fetch data, defaults to now.
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_authorization', 'id_site', 'instance', 'start', 'end']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method installationsid_sitewidgets_solar_charger_relay_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_authorization' is set
        if ('x_authorization' not in params or
                params['x_authorization'] is None):
            raise ValueError("Missing the required parameter `x_authorization` when calling `installationsid_sitewidgets_solar_charger_relay_state`")  # noqa: E501
        # verify the required parameter 'id_site' is set
        if ('id_site' not in params or
                params['id_site'] is None):
            raise ValueError("Missing the required parameter `id_site` when calling `installationsid_sitewidgets_solar_charger_relay_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_site' in params:
            path_params['idSite'] = params['id_site']  # noqa: E501

        query_params = []
        if 'instance' in params:
            query_params.append(('instance', params['instance']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501

        header_params = {}
        if 'x_authorization' in params:
            header_params['x-authorization'] = params['x_authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/installations/{idSite}/widgets/SolarChargerRelayState', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20027',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def installationsid_sitewidgets_ve_bus_state(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """VE Bus state graph data  # noqa: E501

        Retrieves VE Bus state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitewidgets_ve_bus_state(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :param object instance: Instance for which to retrieve data, defaults to 0.
        :param object start: Timestamp from which to fetch data, defaults to one day ago.
        :param object end: Timestamp to which to fetch data, defaults to now.
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.installationsid_sitewidgets_ve_bus_state_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
        else:
            (data) = self.installationsid_sitewidgets_ve_bus_state_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
            return data

    def installationsid_sitewidgets_ve_bus_state_with_http_info(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """VE Bus state graph data  # noqa: E501

        Retrieves VE Bus state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitewidgets_ve_bus_state_with_http_info(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :param object instance: Instance for which to retrieve data, defaults to 0.
        :param object start: Timestamp from which to fetch data, defaults to one day ago.
        :param object end: Timestamp to which to fetch data, defaults to now.
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_authorization', 'id_site', 'instance', 'start', 'end']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method installationsid_sitewidgets_ve_bus_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_authorization' is set
        if ('x_authorization' not in params or
                params['x_authorization'] is None):
            raise ValueError("Missing the required parameter `x_authorization` when calling `installationsid_sitewidgets_ve_bus_state`")  # noqa: E501
        # verify the required parameter 'id_site' is set
        if ('id_site' not in params or
                params['id_site'] is None):
            raise ValueError("Missing the required parameter `id_site` when calling `installationsid_sitewidgets_ve_bus_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_site' in params:
            path_params['idSite'] = params['id_site']  # noqa: E501

        query_params = []
        if 'instance' in params:
            query_params.append(('instance', params['instance']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501

        header_params = {}
        if 'x_authorization' in params:
            header_params['x-authorization'] = params['x_authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/installations/{idSite}/widgets/VeBusState', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20027',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def installationsid_sitewidgets_ve_bus_warnings_and_alarms(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """VE Bus warnings and alarms graph data  # noqa: E501

        Retrieves VE Bus warnings and alarms data for a state graph. If not given a timeframe, data for the last day will be retrieved.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitewidgets_ve_bus_warnings_and_alarms(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :param object instance: Instance for which to retrieve data, defaults to 0.
        :param object start: Timestamp from which to fetch data, defaults to one day ago.
        :param object end: Timestamp to which to fetch data, defaults to now.
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.installationsid_sitewidgets_ve_bus_warnings_and_alarms_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
        else:
            (data) = self.installationsid_sitewidgets_ve_bus_warnings_and_alarms_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
            return data

    def installationsid_sitewidgets_ve_bus_warnings_and_alarms_with_http_info(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """VE Bus warnings and alarms graph data  # noqa: E501

        Retrieves VE Bus warnings and alarms data for a state graph. If not given a timeframe, data for the last day will be retrieved.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitewidgets_ve_bus_warnings_and_alarms_with_http_info(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :param object instance: Instance for which to retrieve data, defaults to 0.
        :param object start: Timestamp from which to fetch data, defaults to one day ago.
        :param object end: Timestamp to which to fetch data, defaults to now.
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_authorization', 'id_site', 'instance', 'start', 'end']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method installationsid_sitewidgets_ve_bus_warnings_and_alarms" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_authorization' is set
        if ('x_authorization' not in params or
                params['x_authorization'] is None):
            raise ValueError("Missing the required parameter `x_authorization` when calling `installationsid_sitewidgets_ve_bus_warnings_and_alarms`")  # noqa: E501
        # verify the required parameter 'id_site' is set
        if ('id_site' not in params or
                params['id_site'] is None):
            raise ValueError("Missing the required parameter `id_site` when calling `installationsid_sitewidgets_ve_bus_warnings_and_alarms`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_site' in params:
            path_params['idSite'] = params['id_site']  # noqa: E501

        query_params = []
        if 'instance' in params:
            query_params.append(('instance', params['instance']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501

        header_params = {}
        if 'x_authorization' in params:
            header_params['x-authorization'] = params['x_authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/installations/{idSite}/widgets/VeBusWarningsAndAlarms', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20027',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
