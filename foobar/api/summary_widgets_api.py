# coding: utf-8

"""
    VRM API

    ## Introduction This document provides a brief overview of some of the available endpoints and their parameters. The API is a REST API, accepting JSON as request body. You can use the try-it tool to play around with it, or use software like Postman.  ## Authentication Most endpoints require authentication, using a JWT token. This token should be placed in the `x-authorization` field in the HTTP header. There are two types of tokens. - Bearer token. Uses the `Bearer <token_value>` format. This is used when logging in to VRM, for example. Can be retrieved from [/auth/login](/operations/auth/login) or [/auth/loginAsDemo](/operations/auth/loginAsDemo). - Access token. Uses the `Token <token_value>` format. This is commonly used for third party applications using the VRM API. Can be created using [/users/{idUser}/accesstokens/create](/operations/users/idUser/accesstokens/create).  ## Rate limiting Most endpoints are by default rate limited with a rolling window of max 200 requests, where every 0.33 seconds a request gets removed from the rolling window. (so on average maximum of 3 requests per second won't get rate limited). There are different types of ratelimiting in VRM. If you receive a 429 with a JSON response, you can check the Retry-After response header to check the amount of seconds you have to wait until retrying.  ## WARNING & DISCLAIMER Whilst publicly available, Victron Energy does not offer support to professional customers or end-users that implement features using the here documented functionality, except in really specific situations (i.e such as a special arrangement with a large OEM customer).  The recommended method for support on the VRM API is to use the Modifications section on Victron Community. This space is frequently visited by many people using the API, and other methods of integrating with Victron products. Direct company support is only offered on a limited basis via your Victron representative.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from foobar.api_client import ApiClient


class SummaryWidgetsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def installationsid_sitewidgets_battery_summary(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """Battery summary data  # noqa: E501

        Retrieves battery summary data for an overview, grouped by data attribute.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitewidgets_battery_summary(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :param object instance: Instance for which to retrieve data, defaults to 0.
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.installationsid_sitewidgets_battery_summary_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
        else:
            (data) = self.installationsid_sitewidgets_battery_summary_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
            return data

    def installationsid_sitewidgets_battery_summary_with_http_info(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """Battery summary data  # noqa: E501

        Retrieves battery summary data for an overview, grouped by data attribute.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitewidgets_battery_summary_with_http_info(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :param object instance: Instance for which to retrieve data, defaults to 0.
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_authorization', 'id_site', 'instance']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method installationsid_sitewidgets_battery_summary" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_authorization' is set
        if ('x_authorization' not in params or
                params['x_authorization'] is None):
            raise ValueError("Missing the required parameter `x_authorization` when calling `installationsid_sitewidgets_battery_summary`")  # noqa: E501
        # verify the required parameter 'id_site' is set
        if ('id_site' not in params or
                params['id_site'] is None):
            raise ValueError("Missing the required parameter `id_site` when calling `installationsid_sitewidgets_battery_summary`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_site' in params:
            path_params['idSite'] = params['id_site']  # noqa: E501

        query_params = []
        if 'instance' in params:
            query_params.append(('instance', params['instance']))  # noqa: E501

        header_params = {}
        if 'x_authorization' in params:
            header_params['x-authorization'] = params['x_authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/installations/{idSite}/widgets/BatterySummary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20028',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def installationsid_sitewidgets_bms_diagnostics(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """BMS diagnostics summary data  # noqa: E501

        Retrieves BMS diagnostics summary data for an overview, grouped by data attribute.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitewidgets_bms_diagnostics(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :param object instance: Instance for which to retrieve data, defaults to 0.
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.installationsid_sitewidgets_bms_diagnostics_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
        else:
            (data) = self.installationsid_sitewidgets_bms_diagnostics_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
            return data

    def installationsid_sitewidgets_bms_diagnostics_with_http_info(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """BMS diagnostics summary data  # noqa: E501

        Retrieves BMS diagnostics summary data for an overview, grouped by data attribute.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitewidgets_bms_diagnostics_with_http_info(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :param object instance: Instance for which to retrieve data, defaults to 0.
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_authorization', 'id_site', 'instance']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method installationsid_sitewidgets_bms_diagnostics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_authorization' is set
        if ('x_authorization' not in params or
                params['x_authorization'] is None):
            raise ValueError("Missing the required parameter `x_authorization` when calling `installationsid_sitewidgets_bms_diagnostics`")  # noqa: E501
        # verify the required parameter 'id_site' is set
        if ('id_site' not in params or
                params['id_site'] is None):
            raise ValueError("Missing the required parameter `id_site` when calling `installationsid_sitewidgets_bms_diagnostics`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_site' in params:
            path_params['idSite'] = params['id_site']  # noqa: E501

        query_params = []
        if 'instance' in params:
            query_params.append(('instance', params['instance']))  # noqa: E501

        header_params = {}
        if 'x_authorization' in params:
            header_params['x-authorization'] = params['x_authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/installations/{idSite}/widgets/BMSDiagnostics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20028',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def installationsid_sitewidgets_dc_meter(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """DC meter summary data  # noqa: E501

        Retrieves DC meter summary data for an overview, grouped by data attribute.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitewidgets_dc_meter(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :param object instance: Instance for which to retrieve data, defaults to 0.
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.installationsid_sitewidgets_dc_meter_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
        else:
            (data) = self.installationsid_sitewidgets_dc_meter_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
            return data

    def installationsid_sitewidgets_dc_meter_with_http_info(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """DC meter summary data  # noqa: E501

        Retrieves DC meter summary data for an overview, grouped by data attribute.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitewidgets_dc_meter_with_http_info(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :param object instance: Instance for which to retrieve data, defaults to 0.
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_authorization', 'id_site', 'instance']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method installationsid_sitewidgets_dc_meter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_authorization' is set
        if ('x_authorization' not in params or
                params['x_authorization'] is None):
            raise ValueError("Missing the required parameter `x_authorization` when calling `installationsid_sitewidgets_dc_meter`")  # noqa: E501
        # verify the required parameter 'id_site' is set
        if ('id_site' not in params or
                params['id_site'] is None):
            raise ValueError("Missing the required parameter `id_site` when calling `installationsid_sitewidgets_dc_meter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_site' in params:
            path_params['idSite'] = params['id_site']  # noqa: E501

        query_params = []
        if 'instance' in params:
            query_params.append(('instance', params['instance']))  # noqa: E501

        header_params = {}
        if 'x_authorization' in params:
            header_params['x-authorization'] = params['x_authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/installations/{idSite}/widgets/DCMeter', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20028',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def installationsid_sitewidgets_ev_charger_summary(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """EV charger summary data  # noqa: E501

        Retrieves EV charger summary data for an overview, grouped by data attribute.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitewidgets_ev_charger_summary(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :param object instance: Instance for which to retrieve data, defaults to 0.
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.installationsid_sitewidgets_ev_charger_summary_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
        else:
            (data) = self.installationsid_sitewidgets_ev_charger_summary_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
            return data

    def installationsid_sitewidgets_ev_charger_summary_with_http_info(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """EV charger summary data  # noqa: E501

        Retrieves EV charger summary data for an overview, grouped by data attribute.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitewidgets_ev_charger_summary_with_http_info(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :param object instance: Instance for which to retrieve data, defaults to 0.
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_authorization', 'id_site', 'instance']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method installationsid_sitewidgets_ev_charger_summary" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_authorization' is set
        if ('x_authorization' not in params or
                params['x_authorization'] is None):
            raise ValueError("Missing the required parameter `x_authorization` when calling `installationsid_sitewidgets_ev_charger_summary`")  # noqa: E501
        # verify the required parameter 'id_site' is set
        if ('id_site' not in params or
                params['id_site'] is None):
            raise ValueError("Missing the required parameter `id_site` when calling `installationsid_sitewidgets_ev_charger_summary`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_site' in params:
            path_params['idSite'] = params['id_site']  # noqa: E501

        query_params = []
        if 'instance' in params:
            query_params.append(('instance', params['instance']))  # noqa: E501

        header_params = {}
        if 'x_authorization' in params:
            header_params['x-authorization'] = params['x_authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/installations/{idSite}/widgets/EvChargerSummary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20028',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def installationsid_sitewidgets_global_link_summary(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """GlobalLink summary data  # noqa: E501

        Retrieves GlobalLink summary data for an overview, grouped by data attribute.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitewidgets_global_link_summary(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :param object instance: Instance for which to retrieve data, defaults to 0.
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.installationsid_sitewidgets_global_link_summary_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
        else:
            (data) = self.installationsid_sitewidgets_global_link_summary_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
            return data

    def installationsid_sitewidgets_global_link_summary_with_http_info(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """GlobalLink summary data  # noqa: E501

        Retrieves GlobalLink summary data for an overview, grouped by data attribute.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitewidgets_global_link_summary_with_http_info(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :param object instance: Instance for which to retrieve data, defaults to 0.
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_authorization', 'id_site', 'instance']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method installationsid_sitewidgets_global_link_summary" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_authorization' is set
        if ('x_authorization' not in params or
                params['x_authorization'] is None):
            raise ValueError("Missing the required parameter `x_authorization` when calling `installationsid_sitewidgets_global_link_summary`")  # noqa: E501
        # verify the required parameter 'id_site' is set
        if ('id_site' not in params or
                params['id_site'] is None):
            raise ValueError("Missing the required parameter `id_site` when calling `installationsid_sitewidgets_global_link_summary`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_site' in params:
            path_params['idSite'] = params['id_site']  # noqa: E501

        query_params = []
        if 'instance' in params:
            query_params.append(('instance', params['instance']))  # noqa: E501

        header_params = {}
        if 'x_authorization' in params:
            header_params['x-authorization'] = params['x_authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/installations/{idSite}/widgets/GlobalLinkSummary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20028',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def installationsid_sitewidgets_historic_data(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """Historic summary data  # noqa: E501

        Retrieves historic summary data for an overview, grouped by data attribute.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitewidgets_historic_data(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :param object instance: Instance for which to retrieve data, defaults to 0.
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.installationsid_sitewidgets_historic_data_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
        else:
            (data) = self.installationsid_sitewidgets_historic_data_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
            return data

    def installationsid_sitewidgets_historic_data_with_http_info(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """Historic summary data  # noqa: E501

        Retrieves historic summary data for an overview, grouped by data attribute.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitewidgets_historic_data_with_http_info(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :param object instance: Instance for which to retrieve data, defaults to 0.
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_authorization', 'id_site', 'instance']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method installationsid_sitewidgets_historic_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_authorization' is set
        if ('x_authorization' not in params or
                params['x_authorization'] is None):
            raise ValueError("Missing the required parameter `x_authorization` when calling `installationsid_sitewidgets_historic_data`")  # noqa: E501
        # verify the required parameter 'id_site' is set
        if ('id_site' not in params or
                params['id_site'] is None):
            raise ValueError("Missing the required parameter `id_site` when calling `installationsid_sitewidgets_historic_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_site' in params:
            path_params['idSite'] = params['id_site']  # noqa: E501

        query_params = []
        if 'instance' in params:
            query_params.append(('instance', params['instance']))  # noqa: E501

        header_params = {}
        if 'x_authorization' in params:
            header_params['x-authorization'] = params['x_authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/installations/{idSite}/widgets/HistoricData', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20028',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def installationsid_sitewidgets_io_extender_in_out(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """IO extender input and output summary data  # noqa: E501

        Retrieves IO extender input and output summary data for an overview, grouped by data attribute.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitewidgets_io_extender_in_out(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :param object instance: Instance for which to retrieve data, defaults to 0.
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.installationsid_sitewidgets_io_extender_in_out_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
        else:
            (data) = self.installationsid_sitewidgets_io_extender_in_out_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
            return data

    def installationsid_sitewidgets_io_extender_in_out_with_http_info(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """IO extender input and output summary data  # noqa: E501

        Retrieves IO extender input and output summary data for an overview, grouped by data attribute.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitewidgets_io_extender_in_out_with_http_info(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :param object instance: Instance for which to retrieve data, defaults to 0.
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_authorization', 'id_site', 'instance']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method installationsid_sitewidgets_io_extender_in_out" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_authorization' is set
        if ('x_authorization' not in params or
                params['x_authorization'] is None):
            raise ValueError("Missing the required parameter `x_authorization` when calling `installationsid_sitewidgets_io_extender_in_out`")  # noqa: E501
        # verify the required parameter 'id_site' is set
        if ('id_site' not in params or
                params['id_site'] is None):
            raise ValueError("Missing the required parameter `id_site` when calling `installationsid_sitewidgets_io_extender_in_out`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_site' in params:
            path_params['idSite'] = params['id_site']  # noqa: E501

        query_params = []
        if 'instance' in params:
            query_params.append(('instance', params['instance']))  # noqa: E501

        header_params = {}
        if 'x_authorization' in params:
            header_params['x-authorization'] = params['x_authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/installations/{idSite}/widgets/IOExtenderInOut', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20028',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def installationsid_sitewidgets_lithium_bms(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """Lithium BMS summary data  # noqa: E501

        Retrieves lithium BMS summary data for an overview, grouped by data attribute.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitewidgets_lithium_bms(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :param object instance: Instance for which to retrieve data, defaults to 0.
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.installationsid_sitewidgets_lithium_bms_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
        else:
            (data) = self.installationsid_sitewidgets_lithium_bms_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
            return data

    def installationsid_sitewidgets_lithium_bms_with_http_info(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """Lithium BMS summary data  # noqa: E501

        Retrieves lithium BMS summary data for an overview, grouped by data attribute.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitewidgets_lithium_bms_with_http_info(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :param object instance: Instance for which to retrieve data, defaults to 0.
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_authorization', 'id_site', 'instance']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method installationsid_sitewidgets_lithium_bms" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_authorization' is set
        if ('x_authorization' not in params or
                params['x_authorization'] is None):
            raise ValueError("Missing the required parameter `x_authorization` when calling `installationsid_sitewidgets_lithium_bms`")  # noqa: E501
        # verify the required parameter 'id_site' is set
        if ('id_site' not in params or
                params['id_site'] is None):
            raise ValueError("Missing the required parameter `id_site` when calling `installationsid_sitewidgets_lithium_bms`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_site' in params:
            path_params['idSite'] = params['id_site']  # noqa: E501

        query_params = []
        if 'instance' in params:
            query_params.append(('instance', params['instance']))  # noqa: E501

        header_params = {}
        if 'x_authorization' in params:
            header_params['x-authorization'] = params['x_authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/installations/{idSite}/widgets/LithiumBMS', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20028',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def installationsid_sitewidgets_meteorological_sensor(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """Meteorological summary data  # noqa: E501

        Retrieves meteorological summary data for an overview, grouped by data attribute.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitewidgets_meteorological_sensor(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :param object instance: Instance for which to retrieve data, defaults to 0.
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.installationsid_sitewidgets_meteorological_sensor_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
        else:
            (data) = self.installationsid_sitewidgets_meteorological_sensor_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
            return data

    def installationsid_sitewidgets_meteorological_sensor_with_http_info(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """Meteorological summary data  # noqa: E501

        Retrieves meteorological summary data for an overview, grouped by data attribute.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitewidgets_meteorological_sensor_with_http_info(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :param object instance: Instance for which to retrieve data, defaults to 0.
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_authorization', 'id_site', 'instance']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method installationsid_sitewidgets_meteorological_sensor" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_authorization' is set
        if ('x_authorization' not in params or
                params['x_authorization'] is None):
            raise ValueError("Missing the required parameter `x_authorization` when calling `installationsid_sitewidgets_meteorological_sensor`")  # noqa: E501
        # verify the required parameter 'id_site' is set
        if ('id_site' not in params or
                params['id_site'] is None):
            raise ValueError("Missing the required parameter `id_site` when calling `installationsid_sitewidgets_meteorological_sensor`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_site' in params:
            path_params['idSite'] = params['id_site']  # noqa: E501

        query_params = []
        if 'instance' in params:
            query_params.append(('instance', params['instance']))  # noqa: E501

        header_params = {}
        if 'x_authorization' in params:
            header_params['x-authorization'] = params['x_authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/installations/{idSite}/widgets/MeteorologicalSensor', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20028',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def installationsid_sitewidgets_motor_summary(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """Motor summary data  # noqa: E501

        Retrieves motor summary data for an overview, grouped by data attribute.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitewidgets_motor_summary(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :param object instance: Instance for which to retrieve data, defaults to 0.
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.installationsid_sitewidgets_motor_summary_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
        else:
            (data) = self.installationsid_sitewidgets_motor_summary_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
            return data

    def installationsid_sitewidgets_motor_summary_with_http_info(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """Motor summary data  # noqa: E501

        Retrieves motor summary data for an overview, grouped by data attribute.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitewidgets_motor_summary_with_http_info(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :param object instance: Instance for which to retrieve data, defaults to 0.
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_authorization', 'id_site', 'instance']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method installationsid_sitewidgets_motor_summary" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_authorization' is set
        if ('x_authorization' not in params or
                params['x_authorization'] is None):
            raise ValueError("Missing the required parameter `x_authorization` when calling `installationsid_sitewidgets_motor_summary`")  # noqa: E501
        # verify the required parameter 'id_site' is set
        if ('id_site' not in params or
                params['id_site'] is None):
            raise ValueError("Missing the required parameter `id_site` when calling `installationsid_sitewidgets_motor_summary`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_site' in params:
            path_params['idSite'] = params['id_site']  # noqa: E501

        query_params = []
        if 'instance' in params:
            query_params.append(('instance', params['instance']))  # noqa: E501

        header_params = {}
        if 'x_authorization' in params:
            header_params['x-authorization'] = params['x_authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/installations/{idSite}/widgets/MotorSummary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20028',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def installationsid_sitewidgets_pv_inverter_status(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """PV inverter summary data  # noqa: E501

        Retrieves PV inverter summary data for an overview, grouped by data attribute.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitewidgets_pv_inverter_status(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :param object instance: Instance for which to retrieve data, defaults to 0.
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.installationsid_sitewidgets_pv_inverter_status_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
        else:
            (data) = self.installationsid_sitewidgets_pv_inverter_status_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
            return data

    def installationsid_sitewidgets_pv_inverter_status_with_http_info(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """PV inverter summary data  # noqa: E501

        Retrieves PV inverter summary data for an overview, grouped by data attribute.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitewidgets_pv_inverter_status_with_http_info(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :param object instance: Instance for which to retrieve data, defaults to 0.
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_authorization', 'id_site', 'instance']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method installationsid_sitewidgets_pv_inverter_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_authorization' is set
        if ('x_authorization' not in params or
                params['x_authorization'] is None):
            raise ValueError("Missing the required parameter `x_authorization` when calling `installationsid_sitewidgets_pv_inverter_status`")  # noqa: E501
        # verify the required parameter 'id_site' is set
        if ('id_site' not in params or
                params['id_site'] is None):
            raise ValueError("Missing the required parameter `id_site` when calling `installationsid_sitewidgets_pv_inverter_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_site' in params:
            path_params['idSite'] = params['id_site']  # noqa: E501

        query_params = []
        if 'instance' in params:
            query_params.append(('instance', params['instance']))  # noqa: E501

        header_params = {}
        if 'x_authorization' in params:
            header_params['x-authorization'] = params['x_authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/installations/{idSite}/widgets/PVInverterStatus', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20028',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def installationsid_sitewidgets_solar_charger_summary(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """Solar charger summary data  # noqa: E501

        Retrieves solar charger summary data for an overview, grouped by data attribute.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitewidgets_solar_charger_summary(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :param object instance: Instance for which to retrieve data, defaults to 0.
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.installationsid_sitewidgets_solar_charger_summary_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
        else:
            (data) = self.installationsid_sitewidgets_solar_charger_summary_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
            return data

    def installationsid_sitewidgets_solar_charger_summary_with_http_info(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """Solar charger summary data  # noqa: E501

        Retrieves solar charger summary data for an overview, grouped by data attribute.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitewidgets_solar_charger_summary_with_http_info(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :param object instance: Instance for which to retrieve data, defaults to 0.
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_authorization', 'id_site', 'instance']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method installationsid_sitewidgets_solar_charger_summary" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_authorization' is set
        if ('x_authorization' not in params or
                params['x_authorization'] is None):
            raise ValueError("Missing the required parameter `x_authorization` when calling `installationsid_sitewidgets_solar_charger_summary`")  # noqa: E501
        # verify the required parameter 'id_site' is set
        if ('id_site' not in params or
                params['id_site'] is None):
            raise ValueError("Missing the required parameter `id_site` when calling `installationsid_sitewidgets_solar_charger_summary`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_site' in params:
            path_params['idSite'] = params['id_site']  # noqa: E501

        query_params = []
        if 'instance' in params:
            query_params.append(('instance', params['instance']))  # noqa: E501

        header_params = {}
        if 'x_authorization' in params:
            header_params['x-authorization'] = params['x_authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/installations/{idSite}/widgets/SolarChargerSummary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20028',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def installationsid_sitewidgets_status(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """System overview summary data  # noqa: E501

        Retrieves system overview summary data for an overview, grouped by data attribute.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitewidgets_status(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :param object instance: Instance for which to retrieve data, defaults to 0.
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.installationsid_sitewidgets_status_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
        else:
            (data) = self.installationsid_sitewidgets_status_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
            return data

    def installationsid_sitewidgets_status_with_http_info(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """System overview summary data  # noqa: E501

        Retrieves system overview summary data for an overview, grouped by data attribute.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitewidgets_status_with_http_info(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :param object instance: Instance for which to retrieve data, defaults to 0.
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_authorization', 'id_site', 'instance']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method installationsid_sitewidgets_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_authorization' is set
        if ('x_authorization' not in params or
                params['x_authorization'] is None):
            raise ValueError("Missing the required parameter `x_authorization` when calling `installationsid_sitewidgets_status`")  # noqa: E501
        # verify the required parameter 'id_site' is set
        if ('id_site' not in params or
                params['id_site'] is None):
            raise ValueError("Missing the required parameter `id_site` when calling `installationsid_sitewidgets_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_site' in params:
            path_params['idSite'] = params['id_site']  # noqa: E501

        query_params = []
        if 'instance' in params:
            query_params.append(('instance', params['instance']))  # noqa: E501

        header_params = {}
        if 'x_authorization' in params:
            header_params['x-authorization'] = params['x_authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/installations/{idSite}/widgets/Status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20028',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def installationsid_sitewidgets_tank_summary(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """Tank summary data  # noqa: E501

        Retrieves tank summary data for an overview, grouped by data attribute.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitewidgets_tank_summary(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :param object instance: Instance for which to retrieve data, defaults to 0.
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.installationsid_sitewidgets_tank_summary_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
        else:
            (data) = self.installationsid_sitewidgets_tank_summary_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
            return data

    def installationsid_sitewidgets_tank_summary_with_http_info(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """Tank summary data  # noqa: E501

        Retrieves tank summary data for an overview, grouped by data attribute.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitewidgets_tank_summary_with_http_info(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :param object instance: Instance for which to retrieve data, defaults to 0.
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_authorization', 'id_site', 'instance']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method installationsid_sitewidgets_tank_summary" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_authorization' is set
        if ('x_authorization' not in params or
                params['x_authorization'] is None):
            raise ValueError("Missing the required parameter `x_authorization` when calling `installationsid_sitewidgets_tank_summary`")  # noqa: E501
        # verify the required parameter 'id_site' is set
        if ('id_site' not in params or
                params['id_site'] is None):
            raise ValueError("Missing the required parameter `id_site` when calling `installationsid_sitewidgets_tank_summary`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_site' in params:
            path_params['idSite'] = params['id_site']  # noqa: E501

        query_params = []
        if 'instance' in params:
            query_params.append(('instance', params['instance']))  # noqa: E501

        header_params = {}
        if 'x_authorization' in params:
            header_params['x-authorization'] = params['x_authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/installations/{idSite}/widgets/TankSummary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20028',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def installationsid_sitewidgets_temp_summary_and_graph(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """Temperature summary data  # noqa: E501

        Retrieves temperature summary data for an overview, grouped by data attribute.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitewidgets_temp_summary_and_graph(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :param object instance: Instance for which to retrieve data, defaults to 0.
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.installationsid_sitewidgets_temp_summary_and_graph_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
        else:
            (data) = self.installationsid_sitewidgets_temp_summary_and_graph_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
            return data

    def installationsid_sitewidgets_temp_summary_and_graph_with_http_info(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """Temperature summary data  # noqa: E501

        Retrieves temperature summary data for an overview, grouped by data attribute.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitewidgets_temp_summary_and_graph_with_http_info(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :param object instance: Instance for which to retrieve data, defaults to 0.
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_authorization', 'id_site', 'instance']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method installationsid_sitewidgets_temp_summary_and_graph" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_authorization' is set
        if ('x_authorization' not in params or
                params['x_authorization'] is None):
            raise ValueError("Missing the required parameter `x_authorization` when calling `installationsid_sitewidgets_temp_summary_and_graph`")  # noqa: E501
        # verify the required parameter 'id_site' is set
        if ('id_site' not in params or
                params['id_site'] is None):
            raise ValueError("Missing the required parameter `id_site` when calling `installationsid_sitewidgets_temp_summary_and_graph`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_site' in params:
            path_params['idSite'] = params['id_site']  # noqa: E501

        query_params = []
        if 'instance' in params:
            query_params.append(('instance', params['instance']))  # noqa: E501

        header_params = {}
        if 'x_authorization' in params:
            header_params['x-authorization'] = params['x_authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/installations/{idSite}/widgets/TempSummaryAndGraph', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20028',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
