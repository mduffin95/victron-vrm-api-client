# coding: utf-8

"""
    VRM API

    ## Introduction This document provides a brief overview of some of the available endpoints and their parameters. The API is a REST API, accepting JSON as request body. You can use the try-it tool to play around with it, or use software like Postman.  ## Authentication Most endpoints require authentication, using a JWT token. This token should be placed in the `x-authorization` field in the HTTP header. There are two types of tokens. - Bearer token. Uses the `Bearer <token_value>` format. This is used when logging in to VRM, for example. Can be retrieved from [/auth/login](/operations/auth/login) or [/auth/loginAsDemo](/operations/auth/loginAsDemo). - Access token. Uses the `Token <token_value>` format. This is commonly used for third party applications using the VRM API. Can be created using [/users/{idUser}/accesstokens/create](/operations/users/idUser/accesstokens/create).  ## Rate limiting Most endpoints are by default rate limited with a rolling window of max 200 requests, where every 0.33 seconds a request gets removed from the rolling window. (so on average maximum of 3 requests per second won't get rate limited). There are different types of ratelimiting in VRM. If you receive a 429 with a JSON response, you can check the Retry-After response header to check the amount of seconds you have to wait until retrying.  ## WARNING & DISCLAIMER Whilst publicly available, Victron Energy does not offer support to professional customers or end-users that implement features using the here documented functionality, except in really specific situations (i.e such as a special arrangement with a large OEM customer).  The recommended method for support on the VRM API is to use the Modifications section on Victron Community. This space is frequently visited by many people using the API, and other methods of integrating with Victron products. Direct company support is only offered on a limited basis via your Victron representative.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class InstallationsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def installations_id_site_alarms_delete(self, body, x_authorization, id_site, **kwargs):  # noqa: E501
        """Delete Alarm  # noqa: E501

        Deletes an alarm already linked to an installation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installations_id_site_alarms_delete(body, x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IdSiteAlarmsBody2 body: (required)
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation ID (required)
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.installations_id_site_alarms_delete_with_http_info(body, x_authorization, id_site, **kwargs)  # noqa: E501
        else:
            (data) = self.installations_id_site_alarms_delete_with_http_info(body, x_authorization, id_site, **kwargs)  # noqa: E501
            return data

    def installations_id_site_alarms_delete_with_http_info(self, body, x_authorization, id_site, **kwargs):  # noqa: E501
        """Delete Alarm  # noqa: E501

        Deletes an alarm already linked to an installation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installations_id_site_alarms_delete_with_http_info(body, x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IdSiteAlarmsBody2 body: (required)
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation ID (required)
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_authorization', 'id_site']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method installations_id_site_alarms_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `installations_id_site_alarms_delete`")  # noqa: E501
        # verify the required parameter 'x_authorization' is set
        if ('x_authorization' not in params or
                params['x_authorization'] is None):
            raise ValueError("Missing the required parameter `x_authorization` when calling `installations_id_site_alarms_delete`")  # noqa: E501
        # verify the required parameter 'id_site' is set
        if ('id_site' not in params or
                params['id_site'] is None):
            raise ValueError("Missing the required parameter `id_site` when calling `installations_id_site_alarms_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_site' in params:
            path_params['idSite'] = params['id_site']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_authorization' in params:
            header_params['x-authorization'] = params['x_authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/installations/{idSite}/alarms', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20013',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def installations_id_site_alarms_get(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """Get Alarms  # noqa: E501

        Gets all information about alarms for a specific installation. Next to that, it also receives all data required to create new alarms  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installations_id_site_alarms_get(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation ID (required)
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.installations_id_site_alarms_get_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
        else:
            (data) = self.installations_id_site_alarms_get_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
            return data

    def installations_id_site_alarms_get_with_http_info(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """Get Alarms  # noqa: E501

        Gets all information about alarms for a specific installation. Next to that, it also receives all data required to create new alarms  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installations_id_site_alarms_get_with_http_info(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation ID (required)
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_authorization', 'id_site']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method installations_id_site_alarms_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_authorization' is set
        if ('x_authorization' not in params or
                params['x_authorization'] is None):
            raise ValueError("Missing the required parameter `x_authorization` when calling `installations_id_site_alarms_get`")  # noqa: E501
        # verify the required parameter 'id_site' is set
        if ('id_site' not in params or
                params['id_site'] is None):
            raise ValueError("Missing the required parameter `id_site` when calling `installations_id_site_alarms_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_site' in params:
            path_params['idSite'] = params['id_site']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_authorization' in params:
            header_params['x-authorization'] = params['x_authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/installations/{idSite}/alarms', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20010',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def installations_id_site_alarms_post(self, body, x_authorization, id_site, **kwargs):  # noqa: E501
        """Add Alarm  # noqa: E501

        Adds an alarm to an installation. Note that there are two different types of alarms; alarms on enums and alarms on numbers (floats). Note that for floats the AlarmEnabled and NotifyAfterSeconds use PascalCase and for enums they use camelCase. You'll get a warning if the wrong case is used.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installations_id_site_alarms_post(body, x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IdSiteAlarmsBody1 body: (required)
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation ID (required)
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.installations_id_site_alarms_post_with_http_info(body, x_authorization, id_site, **kwargs)  # noqa: E501
        else:
            (data) = self.installations_id_site_alarms_post_with_http_info(body, x_authorization, id_site, **kwargs)  # noqa: E501
            return data

    def installations_id_site_alarms_post_with_http_info(self, body, x_authorization, id_site, **kwargs):  # noqa: E501
        """Add Alarm  # noqa: E501

        Adds an alarm to an installation. Note that there are two different types of alarms; alarms on enums and alarms on numbers (floats). Note that for floats the AlarmEnabled and NotifyAfterSeconds use PascalCase and for enums they use camelCase. You'll get a warning if the wrong case is used.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installations_id_site_alarms_post_with_http_info(body, x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IdSiteAlarmsBody1 body: (required)
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation ID (required)
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_authorization', 'id_site']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method installations_id_site_alarms_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `installations_id_site_alarms_post`")  # noqa: E501
        # verify the required parameter 'x_authorization' is set
        if ('x_authorization' not in params or
                params['x_authorization'] is None):
            raise ValueError("Missing the required parameter `x_authorization` when calling `installations_id_site_alarms_post`")  # noqa: E501
        # verify the required parameter 'id_site' is set
        if ('id_site' not in params or
                params['id_site'] is None):
            raise ValueError("Missing the required parameter `id_site` when calling `installations_id_site_alarms_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_site' in params:
            path_params['idSite'] = params['id_site']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_authorization' in params:
            header_params['x-authorization'] = params['x_authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/installations/{idSite}/alarms', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20012',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def installations_id_site_alarms_put(self, body, x_authorization, id_site, **kwargs):  # noqa: E501
        """Edit Alarm  # noqa: E501

        Edits an alarm already linked to an installation. Note that there are two different types of alarms; alarms on enums and alarms on numbers (floats). Note that for floats the AlarmEnabled and NotifyAfterSeconds use PascalCase and for enums they use camelCase. You'll get a warning if the wrong case is used.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installations_id_site_alarms_put(body, x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IdSiteAlarmsBody body: (required)
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation ID (required)
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.installations_id_site_alarms_put_with_http_info(body, x_authorization, id_site, **kwargs)  # noqa: E501
        else:
            (data) = self.installations_id_site_alarms_put_with_http_info(body, x_authorization, id_site, **kwargs)  # noqa: E501
            return data

    def installations_id_site_alarms_put_with_http_info(self, body, x_authorization, id_site, **kwargs):  # noqa: E501
        """Edit Alarm  # noqa: E501

        Edits an alarm already linked to an installation. Note that there are two different types of alarms; alarms on enums and alarms on numbers (floats). Note that for floats the AlarmEnabled and NotifyAfterSeconds use PascalCase and for enums they use camelCase. You'll get a warning if the wrong case is used.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installations_id_site_alarms_put_with_http_info(body, x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IdSiteAlarmsBody body: (required)
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation ID (required)
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_authorization', 'id_site']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method installations_id_site_alarms_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `installations_id_site_alarms_put`")  # noqa: E501
        # verify the required parameter 'x_authorization' is set
        if ('x_authorization' not in params or
                params['x_authorization'] is None):
            raise ValueError("Missing the required parameter `x_authorization` when calling `installations_id_site_alarms_put`")  # noqa: E501
        # verify the required parameter 'id_site' is set
        if ('id_site' not in params or
                params['id_site'] is None):
            raise ValueError("Missing the required parameter `id_site` when calling `installations_id_site_alarms_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_site' in params:
            path_params['idSite'] = params['id_site']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_authorization' in params:
            header_params['x-authorization'] = params['x_authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/installations/{idSite}/alarms', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20011',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def installations_id_site_dynamic_ess_settings_get(self, id, x_authorization, **kwargs):  # noqa: E501
        """Dynamic ESS configuration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installations_id_site_dynamic_ess_settings_get(id, x_authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object id: The ID of the installation (required)
        :param object x_authorization: The bearer token to use. (required)
        :return: InlineResponse20017
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.installations_id_site_dynamic_ess_settings_get_with_http_info(id, x_authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.installations_id_site_dynamic_ess_settings_get_with_http_info(id, x_authorization, **kwargs)  # noqa: E501
            return data

    def installations_id_site_dynamic_ess_settings_get_with_http_info(self, id, x_authorization, **kwargs):  # noqa: E501
        """Dynamic ESS configuration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installations_id_site_dynamic_ess_settings_get_with_http_info(id, x_authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object id: The ID of the installation (required)
        :param object x_authorization: The bearer token to use. (required)
        :return: InlineResponse20017
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'x_authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method installations_id_site_dynamic_ess_settings_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `installations_id_site_dynamic_ess_settings_get`")  # noqa: E501
        # verify the required parameter 'x_authorization' is set
        if ('x_authorization' not in params or
                params['x_authorization'] is None):
            raise ValueError("Missing the required parameter `x_authorization` when calling `installations_id_site_dynamic_ess_settings_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_authorization' in params:
            header_params['x-authorization'] = params['x_authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/installations/{idSite}/dynamic-ess-settings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20017',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def installations_id_site_dynamic_ess_settings_post(self, x_authorization, id, **kwargs):  # noqa: E501
        """Dynamic ESS configuration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installations_id_site_dynamic_ess_settings_post(x_authorization, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id: The ID of the installation (required)
        :param IdSiteDynamicesssettingsBody body:
        :return: InlineResponse20017
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.installations_id_site_dynamic_ess_settings_post_with_http_info(x_authorization, id, **kwargs)  # noqa: E501
        else:
            (data) = self.installations_id_site_dynamic_ess_settings_post_with_http_info(x_authorization, id, **kwargs)  # noqa: E501
            return data

    def installations_id_site_dynamic_ess_settings_post_with_http_info(self, x_authorization, id, **kwargs):  # noqa: E501
        """Dynamic ESS configuration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installations_id_site_dynamic_ess_settings_post_with_http_info(x_authorization, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id: The ID of the installation (required)
        :param IdSiteDynamicesssettingsBody body:
        :return: InlineResponse20017
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_authorization', 'id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method installations_id_site_dynamic_ess_settings_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_authorization' is set
        if ('x_authorization' not in params or
                params['x_authorization'] is None):
            raise ValueError("Missing the required parameter `x_authorization` when calling `installations_id_site_dynamic_ess_settings_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `installations_id_site_dynamic_ess_settings_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_authorization' in params:
            header_params['x-authorization'] = params['x_authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/installations/{idSite}/dynamic-ess-settings', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20017',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def installations_id_site_invite_post(self, body, x_authorization, id_site, **kwargs):  # noqa: E501
        """Invite user to installation  # noqa: E501

        Sends an invitation to a user to gain access to a specific installation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installations_id_site_invite_post(body, x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IdSiteInviteBody body: (required)
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation ID (required)
        :return: InlineResponse20023
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.installations_id_site_invite_post_with_http_info(body, x_authorization, id_site, **kwargs)  # noqa: E501
        else:
            (data) = self.installations_id_site_invite_post_with_http_info(body, x_authorization, id_site, **kwargs)  # noqa: E501
            return data

    def installations_id_site_invite_post_with_http_info(self, body, x_authorization, id_site, **kwargs):  # noqa: E501
        """Invite user to installation  # noqa: E501

        Sends an invitation to a user to gain access to a specific installation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installations_id_site_invite_post_with_http_info(body, x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IdSiteInviteBody body: (required)
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation ID (required)
        :return: InlineResponse20023
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_authorization', 'id_site']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method installations_id_site_invite_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `installations_id_site_invite_post`")  # noqa: E501
        # verify the required parameter 'x_authorization' is set
        if ('x_authorization' not in params or
                params['x_authorization'] is None):
            raise ValueError("Missing the required parameter `x_authorization` when calling `installations_id_site_invite_post`")  # noqa: E501
        # verify the required parameter 'id_site' is set
        if ('id_site' not in params or
                params['id_site'] is None):
            raise ValueError("Missing the required parameter `id_site` when calling `installations_id_site_invite_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_site' in params:
            path_params['idSite'] = params['id_site']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_authorization' in params:
            header_params['x-authorization'] = params['x_authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/installations/{idSite}/invite', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20023',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def installationsid_siteclear_alarm(self, body, x_authorization, id_site, **kwargs):  # noqa: E501
        """Clear alarm  # noqa: E501

        Clears alarms and marks them as cleared by the user in Event Logs.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_siteclear_alarm(body, x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IdSiteClearalarmBody body: (required)
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: ID of the installation. (required)
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.installationsid_siteclear_alarm_with_http_info(body, x_authorization, id_site, **kwargs)  # noqa: E501
        else:
            (data) = self.installationsid_siteclear_alarm_with_http_info(body, x_authorization, id_site, **kwargs)  # noqa: E501
            return data

    def installationsid_siteclear_alarm_with_http_info(self, body, x_authorization, id_site, **kwargs):  # noqa: E501
        """Clear alarm  # noqa: E501

        Clears alarms and marks them as cleared by the user in Event Logs.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_siteclear_alarm_with_http_info(body, x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IdSiteClearalarmBody body: (required)
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: ID of the installation. (required)
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_authorization', 'id_site']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method installationsid_siteclear_alarm" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `installationsid_siteclear_alarm`")  # noqa: E501
        # verify the required parameter 'x_authorization' is set
        if ('x_authorization' not in params or
                params['x_authorization'] is None):
            raise ValueError("Missing the required parameter `x_authorization` when calling `installationsid_siteclear_alarm`")  # noqa: E501
        # verify the required parameter 'id_site' is set
        if ('id_site' not in params or
                params['id_site'] is None):
            raise ValueError("Missing the required parameter `id_site` when calling `installationsid_siteclear_alarm`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_site' in params:
            path_params['idSite'] = params['id_site']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_authorization' in params:
            header_params['x-authorization'] = params['x_authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/installations/{idSite}/clear-alarm', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20014',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def installationsid_sitedata_download(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """Download installation data  # noqa: E501

        Retrieves a base64 encoded string containing the specified installation data, in the specified format.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitedata_download(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :param object start: Timestamp from which to fetch data, defaults to one day ago.
        :param object end: Timestamp to which to fetch data, defaults to now.
        :param object datatype: Type of data to export, defaults to log.
        :param object format: Export data file format, defaults to csv.
        :param object debug: Include debug attributes, only for admins and restricted admins, defaults to false.
        :param object _async: If true, the request is executed asynchronously and the result is not included in the response but sent to the email address of the requesting account.
        :return: InlineResponse20019
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.installationsid_sitedata_download_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
        else:
            (data) = self.installationsid_sitedata_download_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
            return data

    def installationsid_sitedata_download_with_http_info(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """Download installation data  # noqa: E501

        Retrieves a base64 encoded string containing the specified installation data, in the specified format.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitedata_download_with_http_info(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :param object start: Timestamp from which to fetch data, defaults to one day ago.
        :param object end: Timestamp to which to fetch data, defaults to now.
        :param object datatype: Type of data to export, defaults to log.
        :param object format: Export data file format, defaults to csv.
        :param object debug: Include debug attributes, only for admins and restricted admins, defaults to false.
        :param object _async: If true, the request is executed asynchronously and the result is not included in the response but sent to the email address of the requesting account.
        :return: InlineResponse20019
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_authorization', 'id_site', 'start', 'end', 'datatype', 'format', 'debug', '_async']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method installationsid_sitedata_download" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_authorization' is set
        if ('x_authorization' not in params or
                params['x_authorization'] is None):
            raise ValueError("Missing the required parameter `x_authorization` when calling `installationsid_sitedata_download`")  # noqa: E501
        # verify the required parameter 'id_site' is set
        if ('id_site' not in params or
                params['id_site'] is None):
            raise ValueError("Missing the required parameter `id_site` when calling `installationsid_sitedata_download`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_site' in params:
            path_params['idSite'] = params['id_site']  # noqa: E501

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501
        if 'datatype' in params:
            query_params.append(('datatype', params['datatype']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501
        if 'debug' in params:
            query_params.append(('debug', params['debug']))  # noqa: E501
        if '_async' in params:
            query_params.append(('async', params['_async']))  # noqa: E501

        header_params = {}
        if 'x_authorization' in params:
            header_params['x-authorization'] = params['x_authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/html', 'text/csv', 'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/installations/{idSite}/data-download', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20019',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def installationsid_sitediagnostics(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """Diagnostic data for an installation  # noqa: E501

        Retrieves log data for an installation. This endpoint is only accessible to users with access to the installation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitediagnostics(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :param object count: How many records to fetch, 100 if not specified.
        :param object page: Which page to fetch, 1 if not specified.
        :return: InlineResponse20016
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.installationsid_sitediagnostics_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
        else:
            (data) = self.installationsid_sitediagnostics_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
            return data

    def installationsid_sitediagnostics_with_http_info(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """Diagnostic data for an installation  # noqa: E501

        Retrieves log data for an installation. This endpoint is only accessible to users with access to the installation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitediagnostics_with_http_info(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :param object count: How many records to fetch, 100 if not specified.
        :param object page: Which page to fetch, 1 if not specified.
        :return: InlineResponse20016
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_authorization', 'id_site', 'count', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method installationsid_sitediagnostics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_authorization' is set
        if ('x_authorization' not in params or
                params['x_authorization'] is None):
            raise ValueError("Missing the required parameter `x_authorization` when calling `installationsid_sitediagnostics`")  # noqa: E501
        # verify the required parameter 'id_site' is set
        if ('id_site' not in params or
                params['id_site'] is None):
            raise ValueError("Missing the required parameter `id_site` when calling `installationsid_sitediagnostics`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_site' in params:
            path_params['idSite'] = params['id_site']  # noqa: E501

        query_params = []
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}
        if 'x_authorization' in params:
            header_params['x-authorization'] = params['x_authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/installations/{idSite}/diagnostics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20016',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def installationsid_sitegps_download(self, x_authorization, id_site, start, end, **kwargs):  # noqa: E501
        """GPS tracks for an installation  # noqa: E501

        Retrieves GPS tracks for an installation as a KML file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitegps_download(x_authorization, id_site, start, end, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :param object start: Timestamp from which to fetch data. (required)
        :param object end: Timestamp to which to fetch data. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.installationsid_sitegps_download_with_http_info(x_authorization, id_site, start, end, **kwargs)  # noqa: E501
        else:
            (data) = self.installationsid_sitegps_download_with_http_info(x_authorization, id_site, start, end, **kwargs)  # noqa: E501
            return data

    def installationsid_sitegps_download_with_http_info(self, x_authorization, id_site, start, end, **kwargs):  # noqa: E501
        """GPS tracks for an installation  # noqa: E501

        Retrieves GPS tracks for an installation as a KML file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitegps_download_with_http_info(x_authorization, id_site, start, end, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :param object start: Timestamp from which to fetch data. (required)
        :param object end: Timestamp to which to fetch data. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_authorization', 'id_site', 'start', 'end']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method installationsid_sitegps_download" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_authorization' is set
        if ('x_authorization' not in params or
                params['x_authorization'] is None):
            raise ValueError("Missing the required parameter `x_authorization` when calling `installationsid_sitegps_download`")  # noqa: E501
        # verify the required parameter 'id_site' is set
        if ('id_site' not in params or
                params['id_site'] is None):
            raise ValueError("Missing the required parameter `id_site` when calling `installationsid_sitegps_download`")  # noqa: E501
        # verify the required parameter 'start' is set
        if ('start' not in params or
                params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `installationsid_sitegps_download`")  # noqa: E501
        # verify the required parameter 'end' is set
        if ('end' not in params or
                params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `installationsid_sitegps_download`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_site' in params:
            path_params['idSite'] = params['id_site']  # noqa: E501

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501

        header_params = {}
        if 'x_authorization' in params:
            header_params['x-authorization'] = params['x_authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.google-earth.kml+xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/installations/{idSite}/gps-download', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def installationsid_siteoverallstats(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """Overall installation stats  # noqa: E501

        Retrieves installation stats grouped by the last year, month, week and day. If the datatype is set to custom, one or more attributes can be provided using the attributeCodes[] parameter.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_siteoverallstats(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :param object type: Type of data to fetch, defaults to live_feed. If set to custom, the attributeCodes[] parameter must be provided.
        :param object attribute_codes: Attribute codes for which to retrieve series, repeated for each attribute. Required at least once if datatype is set to custom.
        :return: InlineResponse20021
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.installationsid_siteoverallstats_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
        else:
            (data) = self.installationsid_siteoverallstats_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
            return data

    def installationsid_siteoverallstats_with_http_info(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """Overall installation stats  # noqa: E501

        Retrieves installation stats grouped by the last year, month, week and day. If the datatype is set to custom, one or more attributes can be provided using the attributeCodes[] parameter.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_siteoverallstats_with_http_info(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :param object type: Type of data to fetch, defaults to live_feed. If set to custom, the attributeCodes[] parameter must be provided.
        :param object attribute_codes: Attribute codes for which to retrieve series, repeated for each attribute. Required at least once if datatype is set to custom.
        :return: InlineResponse20021
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_authorization', 'id_site', 'type', 'attribute_codes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method installationsid_siteoverallstats" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_authorization' is set
        if ('x_authorization' not in params or
                params['x_authorization'] is None):
            raise ValueError("Missing the required parameter `x_authorization` when calling `installationsid_siteoverallstats`")  # noqa: E501
        # verify the required parameter 'id_site' is set
        if ('id_site' not in params or
                params['id_site'] is None):
            raise ValueError("Missing the required parameter `id_site` when calling `installationsid_siteoverallstats`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_site' in params:
            path_params['idSite'] = params['id_site']  # noqa: E501

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'attribute_codes' in params:
            query_params.append(('attributeCodes[]', params['attribute_codes']))  # noqa: E501

        header_params = {}
        if 'x_authorization' in params:
            header_params['x-authorization'] = params['x_authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/installations/{idSite}/overallstats', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20021',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def installationsid_sitesettings(self, x_authorization, id, **kwargs):  # noqa: E501
        """Update settings for a specific installation  # noqa: E501

        Allows the user to modify settings related to a specific installation identified by its ID. You can send one or more of the fields you want to update at once.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitesettings(x_authorization, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id: The ID of the installation (required)
        :param IdSiteSettingsBody body:
        :return: InlineResponse20022
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.installationsid_sitesettings_with_http_info(x_authorization, id, **kwargs)  # noqa: E501
        else:
            (data) = self.installationsid_sitesettings_with_http_info(x_authorization, id, **kwargs)  # noqa: E501
            return data

    def installationsid_sitesettings_with_http_info(self, x_authorization, id, **kwargs):  # noqa: E501
        """Update settings for a specific installation  # noqa: E501

        Allows the user to modify settings related to a specific installation identified by its ID. You can send one or more of the fields you want to update at once.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitesettings_with_http_info(x_authorization, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id: The ID of the installation (required)
        :param IdSiteSettingsBody body:
        :return: InlineResponse20022
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_authorization', 'id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method installationsid_sitesettings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_authorization' is set
        if ('x_authorization' not in params or
                params['x_authorization'] is None):
            raise ValueError("Missing the required parameter `x_authorization` when calling `installationsid_sitesettings`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `installationsid_sitesettings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_authorization' in params:
            header_params['x-authorization'] = params['x_authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/installations/{idSite}/settings', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20022',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def installationsid_sitestats(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """Installation stats  # noqa: E501

        Retrieves installation stats for the specified period, or one day if none specified. If the datatype is set to custom, one or more attributes can be provided using the attributeCodes[] parameter.  There is a maximum allowed time period for each interval, which is: * 31 days for 15 minutes * 31 days for hours * 180 days for days * 140 days for weeks * 24 months for months * 5 years for years   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitestats(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :param object start: Timestamp from which to fetch data, defaults to one day ago.
        :param object end: Timestamp to which to fetch data, defaults to now.
        :param object type: Type of data to fetch, defaults to live_feed. If set to custom, the attributeCodes[] parameter must be provided.
        :param object interval: Time between retrieved data points, defaults to hours.
        :param object attribute_codes: Attribute codes for which to retrieve series, repeated for each attribute. Required at least once if datatype is set to custom.
        :param object show_instance: If included, attributes will be grouped by instance.
        :return: InlineResponse20020
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.installationsid_sitestats_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
        else:
            (data) = self.installationsid_sitestats_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
            return data

    def installationsid_sitestats_with_http_info(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """Installation stats  # noqa: E501

        Retrieves installation stats for the specified period, or one day if none specified. If the datatype is set to custom, one or more attributes can be provided using the attributeCodes[] parameter.  There is a maximum allowed time period for each interval, which is: * 31 days for 15 minutes * 31 days for hours * 180 days for days * 140 days for weeks * 24 months for months * 5 years for years   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitestats_with_http_info(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :param object start: Timestamp from which to fetch data, defaults to one day ago.
        :param object end: Timestamp to which to fetch data, defaults to now.
        :param object type: Type of data to fetch, defaults to live_feed. If set to custom, the attributeCodes[] parameter must be provided.
        :param object interval: Time between retrieved data points, defaults to hours.
        :param object attribute_codes: Attribute codes for which to retrieve series, repeated for each attribute. Required at least once if datatype is set to custom.
        :param object show_instance: If included, attributes will be grouped by instance.
        :return: InlineResponse20020
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_authorization', 'id_site', 'start', 'end', 'type', 'interval', 'attribute_codes', 'show_instance']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method installationsid_sitestats" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_authorization' is set
        if ('x_authorization' not in params or
                params['x_authorization'] is None):
            raise ValueError("Missing the required parameter `x_authorization` when calling `installationsid_sitestats`")  # noqa: E501
        # verify the required parameter 'id_site' is set
        if ('id_site' not in params or
                params['id_site'] is None):
            raise ValueError("Missing the required parameter `id_site` when calling `installationsid_sitestats`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_site' in params:
            path_params['idSite'] = params['id_site']  # noqa: E501

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'interval' in params:
            query_params.append(('interval', params['interval']))  # noqa: E501
        if 'attribute_codes' in params:
            query_params.append(('attributeCodes[]', params['attribute_codes']))  # noqa: E501
        if 'show_instance' in params:
            query_params.append(('show_instance', params['show_instance']))  # noqa: E501

        header_params = {}
        if 'x_authorization' in params:
            header_params['x-authorization'] = params['x_authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/installations/{idSite}/stats', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20020',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def installationsid_sitesystem_overview(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """Connected devices for a given installation  # noqa: E501

        Retrieves a list of devices to which are connected to this installation. This endpoint is only accessible to users with access to the installation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitesystem_overview(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.installationsid_sitesystem_overview_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
        else:
            (data) = self.installationsid_sitesystem_overview_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
            return data

    def installationsid_sitesystem_overview_with_http_info(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """Connected devices for a given installation  # noqa: E501

        Retrieves a list of devices to which are connected to this installation. This endpoint is only accessible to users with access to the installation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitesystem_overview_with_http_info(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_authorization', 'id_site']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method installationsid_sitesystem_overview" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_authorization' is set
        if ('x_authorization' not in params or
                params['x_authorization'] is None):
            raise ValueError("Missing the required parameter `x_authorization` when calling `installationsid_sitesystem_overview`")  # noqa: E501
        # verify the required parameter 'id_site' is set
        if ('id_site' not in params or
                params['id_site'] is None):
            raise ValueError("Missing the required parameter `id_site` when calling `installationsid_sitesystem_overview`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_site' in params:
            path_params['idSite'] = params['id_site']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_authorization' in params:
            header_params['x-authorization'] = params['x_authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/installations/{idSite}/system-overview', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20015',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def installationsid_sitetags(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """Get installation tags  # noqa: E501

        Tags for an installation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitetags(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :return: InlineResponse20018
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.installationsid_sitetags_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
        else:
            (data) = self.installationsid_sitetags_with_http_info(x_authorization, id_site, **kwargs)  # noqa: E501
            return data

    def installationsid_sitetags_with_http_info(self, x_authorization, id_site, **kwargs):  # noqa: E501
        """Get installation tags  # noqa: E501

        Tags for an installation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.installationsid_sitetags_with_http_info(x_authorization, id_site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_authorization: The bearer token to use. (required)
        :param object id_site: Installation id (required)
        :return: InlineResponse20018
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_authorization', 'id_site']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method installationsid_sitetags" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_authorization' is set
        if ('x_authorization' not in params or
                params['x_authorization'] is None):
            raise ValueError("Missing the required parameter `x_authorization` when calling `installationsid_sitetags`")  # noqa: E501
        # verify the required parameter 'id_site' is set
        if ('id_site' not in params or
                params['id_site'] is None):
            raise ValueError("Missing the required parameter `id_site` when calling `installationsid_sitetags`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_site' in params:
            path_params['idSite'] = params['id_site']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_authorization' in params:
            header_params['x-authorization'] = params['x_authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/installations/{idSite}/tags', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20018',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
